syntax = "proto3";

import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_package = "mafia.server.lobby.protocol";

enum UserStatus {
  OFFLINE = 0;
  PENDING = 1;
  LOBBY = 2;
  ROOM = 3;
  PLAYING = 4;
}

service LobbyService {
  rpc HandleCommunication(stream LobbyClientMessage) returns (stream LobbyServerMessage);
}

message LobbyClientMessage {
  oneof content {
    // default lobby
    ClientConnect connect = 1;
    ClientSetUserStatus set_user_status = 2; // 유저 상태 세팅
    ClientChatAll chat_all = 3; // 전체
    ClientChatDirect chat_direct = 4; // dm

    // 게임 방 10 ~ 19
    ClientCreateRoom create_room = 10;
    ClientEnterRoom enter_room = 11;
    ClientInviteRoom invite_room = 12; // 게임 방 초대
    ClientReplyInviteRoom reply_invite_room = 13; // 게임 방 초대에 대한 응답 (수락/거절)
    ClientChatRoom chat_room = 14; // 게임 방내 채팅
    ClientLeaveRoom leave_room = 15; // 게임 방 나가기
    ClientReadyRoom ready_room = 16; // 게임 방 준비 완료
    ClientStartRoom start_room = 17; // 방장의 게임 시작 하기

    // 매칭 20 ~ 29
    ClientRequestMatch request_match = 20; // 게임 매칭 요청
    ClientCancelMatch cancel_match = 21; // 게임 매칭 요청 캔슬
  }
}

message ClientConnect {

}

message ClientSetUserStatus {
  UserStatus user_status = 1;
}

message ClientChatAll {
  string message = 1;
}

message ClientChatDirect {
  int64 account_id = 1; // 받는 대상
  string message = 2;
}

message ClientCreateRoom {
  string title = 1;
}

message ClientEnterRoom {
  int32 room_id = 1;
}

message ClientInviteRoom {
  int64 account_id = 1;
}

message ClientReplyInviteRoom {
  int32 room_id = 1;
  bool accepted = 2;
}

message ClientChatRoom {
  string message = 1;
}

message ClientLeaveRoom {

}

message ClientReadyRoom {

}

message ClientStartRoom {

}

message ClientRequestMatch {

}

message ClientCancelMatch {

}


message LobbyServerMessage {
  google.protobuf.Timestamp timestamp = 1;

  oneof content {
    // default lobby
    ServerConnectResult connect_result = 2;
    ServerDisconnect disconnect = 3;
    ServerError error = 4;
    ServerUpdateUserStatus update_user_status = 5; // 친구등의 온/오프라인 여부 및 로비 인지 게임중 인지 상태
    ServerChatAll chat_all = 6;
    ServerChatDirect chat_direct = 7;
    ServerRoomList room_list = 8; // 게임 방 목록
    ServerUpdateRoomList update_room_list = 9; // 게임 방 목록 변화시 로비에 있는 유저들에게 전송

    // 게임 방 10 ~ 19
    ServerCreateRoomResult create_room_result = 10;
    ServerEnterRoomResult enter_room_result = 11;
    ServerInviteRoom invite_room = 12;
    ServerReplyInviteRoomResult reply_invite_room_result = 13;
    ServerUpdateRoom update_room = 15; // 유저 입장, 유저 나감, 유저 준비 완료, 유저 강퇴 등등
    ServerChatRoom chat_room = 16;
    ServerStartGame room_start_game = 17; // 게임 방에서 게임 시작을 한 경우

    // 매칭 20 ~ 29
    ServerStartGame match_start_game = 20; // 매칭을 통해 게임 시작을 한경우
  }
}

message ServerConnectResult {
  bool connected = 1;
}

message ServerDisconnect {
  enum Type {
    UNKNOWN = 0; // 알 수 없음
    SERVER = 1; // 강제
    OVERLAP = 2; // 중복
    TIMEOUT = 3; // 타임 아웃
  }
  Type type = 1;
}

message ServerError {

}

message ServerUpdateUserStatus {

}

message ServerChatAll {
  int64 account_id = 1; // 보낸 대상
  string nickname = 2; // 보낸 대상 닉네임
  string message = 3;
}

message ServerChatDirect {
  int64 account_id = 1; // 보낸 대상
  string nickname = 2; // 보낸 대상 닉네임
  string message = 3;
}

message ServerRoomList {
  repeated Common.RoomInfo room_list = 1;
}

message ServerUpdateRoomList {
  Common.RoomInfo updated_room = 1;
}

message ServerCreateRoomResult {
  enum Type {
    FAILURE = 0;
    SUCCESS = 1;
  }
  Type type = 1;
  Common.RoomInfo room_info = 2;
}

message ServerEnterRoomResult {
  enum Type {
    FAILURE = 0;
    SUCCESS = 1;
    ALREADY_FULL = 2;
    NOT_FOUND = 3;
  }
  Type type = 1;
  Common.RoomDetail room_detail = 2;
}

message ServerInviteRoom {
  int64 account_id = 1;
  string nickname = 2;
  int32 room_id = 3;
}

message ServerReplyInviteRoomResult {
  enum Type {
    SUCCESS = 0;
    ALREADY_FULL = 1; // 이미 가득 참
    EXPIRED = 2; // 방이 존재하지 않음
  }
  Type type = 1;
}

message ServerUpdateRoom {
  enum Type {
    LEAVE = 0; // 퇴장
    ENTER = 1; // 입장
    KICK = 2; // 강퇴
    READY = 3; // 준비 완료
    CHANGE_HOST = 4; // 방장 변경
  }
  Type type = 1;
  int64 account_id = 2; // 어떤 유저 인지
  string nickname = 3;
}

message ServerChatRoom {
  int64 account_id = 1;
  string nickname = 2;
  string message = 3;
}

message ServerStartGame {

}

message Common {
  message UserInfo {
    int64 accountId = 1;
  }

  message RoomInfo {
    int32 room_id = 1;
    string title = 2;
    int32 user_count = 3;
  }

  message RoomUser {
    int64 account_id = 1;
    bool host = 2;
    bool ready = 3;
  }

  message RoomDetail {
    RoomInfo room_info = 1;
    repeated RoomUser users = 2;
  }
}

